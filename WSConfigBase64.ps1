$YamlBase64 = @'

'@
function Extract-YamlConfig {
    param ([string]$TargetPath)
    try {
        [IO.File]::WriteAllBytes($TargetPath, [Convert]::FromBase64String($YamlBase64))
    }
    catch {
        Write-Error "Failed to decode YAML: $($_.Exception.Message)"
    }
}